{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _react = require('react');\nvar _react2 = _interopRequireDefault(_react);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nfunction VanillaTilt(element) {\n  this.width = null;\n  this.height = null;\n  this.left = null;\n  this.top = null;\n  this.transitionTimeout = null;\n  this.updateCall = null;\n  this.updateBind = this.update.bind(this);\n  this.resetBind = this.reset.bind(this);\n  this.element = element;\n  this.settings = this.getSettings();\n  this.element.style.boxShadow = this.getShadow(this.settings);\n  this.reverse = this.settings.reverse ? -1 : 1;\n  this.addEventListeners();\n}\nVanillaTilt.prototype.getShadow = function getShadow(settings, values) {\n  if (!values) values = {\n    percentageX: 50,\n    percentageY: 50\n  };\n  var shadow = this.settings.shadow;\n  return shadow.color + ' ' + (shadow.x.min + 0.01 * values.percentageX * (shadow.x.max - shadow.x.min)) + 'px ' + (shadow.y.min + 0.01 * values.percentageY * (shadow.y.max - shadow.y.min)) + 'px ' + shadow.spread + 'px';\n};\nVanillaTilt.prototype.isSettingTrue = function isSettingTrue(setting) {\n  return setting === '' || setting === true || setting === 1;\n};\nVanillaTilt.prototype.addEventListeners = function addEventListeners() {\n  this.onMouseEnterBind = this.onMouseEnter.bind(this);\n  this.onMouseMoveBind = this.onMouseMove.bind(this);\n  this.onMouseLeaveBind = this.onMouseLeave.bind(this);\n  this.element.addEventListener('mouseenter', this.onMouseEnterBind);\n  this.element.addEventListener('mousemove', this.onMouseMoveBind);\n  this.element.addEventListener('mouseleave', this.onMouseLeaveBind);\n};\nVanillaTilt.prototype.removeEventListeners = function removeEventListeners() {\n  this.element.removeEventListener('mouseenter', this.onMouseEnterBind);\n  this.element.removeEventListener('mousemove', this.onMouseMoveBind);\n  this.element.removeEventListener('mouseleave', this.onMouseLeaveBind);\n};\nVanillaTilt.prototype.destroy = function destroy() {\n  clearTimeout(this.transitionTimeout);\n  if (this.updateCall !== null) cancelAnimationFrame(this.updateCall);\n  this.reset();\n  this.removeEventListeners();\n  this.element.vanillaTilt = null;\n  delete this.element.vanillaTilt;\n  this.element = null;\n};\nVanillaTilt.prototype.onMouseEnter = function onMouseEnter(event) {\n  this.updateElementPosition();\n  this.element.style.willChange = 'transform';\n  this.setTransition();\n};\nVanillaTilt.prototype.onMouseMove = function onMouseMove(event) {\n  if (this.updateCall !== null) {\n    cancelAnimationFrame(this.updateCall);\n  }\n  this.event = event;\n  this.updateCall = requestAnimationFrame(this.updateBind);\n};\nVanillaTilt.prototype.onMouseLeave = function onMouseLeave(event) {\n  this.setTransition();\n  requestAnimationFrame(this.resetBind);\n};\nVanillaTilt.prototype.reset = function reset() {\n  this.event = {\n    pageX: this.left + this.width / 2,\n    pageY: this.top + this.height / 2\n  };\n  this.element.style.transform = 'perspective(' + this.settings.perspective + 'px) ' + 'rotateX(0deg) ' + 'rotateY(0deg) ' + 'scale3d(1, 1, 1)';\n  this.element.style.boxShadow = this.getShadow(this.settings);\n};\nVanillaTilt.prototype.getValues = function getValues() {\n  var x = (this.event.clientX - this.left) / this.width;\n  var y = (this.event.clientY - this.top) / this.height;\n  x = Math.min(Math.max(x, 0), 1);\n  y = Math.min(Math.max(y, 0), 1);\n  var tiltX = (this.reverse * (this.settings.max / 2 - x * this.settings.max)).toFixed(2);\n  var tiltY = (this.reverse * (y * this.settings.max - this.settings.max / 2)).toFixed(2);\n  var angle = Math.atan2(this.event.clientX - (this.left + this.width / 2), -(this.event.clientY - (this.top + this.height / 2))) * (180 / Math.PI);\n  return {\n    tiltX: tiltX,\n    tiltY: tiltY,\n    percentageX: x * 100,\n    percentageY: y * 100,\n    angle: angle\n  };\n};\nVanillaTilt.prototype.updateElementPosition = function updateElementPosition() {\n  var rect = this.element.getBoundingClientRect();\n  this.width = this.element.offsetWidth;\n  this.height = this.element.offsetHeight;\n  this.left = rect.left;\n  this.top = rect.top;\n};\nVanillaTilt.prototype.update = function update() {\n  var values = this.getValues();\n  this.element.style.transform = 'perspective(' + this.settings.perspective + 'px) ' + 'rotateX(' + (this.settings.axis === 'x' ? 0 : values.tiltY) + 'deg) ' + 'rotateY(' + (this.settings.axis === 'y' ? 0 : values.tiltX) + 'deg) ' + 'scale3d(' + this.settings.scale + ', ' + this.settings.scale + ', ' + this.settings.scale + ')';\n  this.element.style.boxShadow = this.getShadow(this.settings, values);\n  this.element.dispatchEvent(new CustomEvent('tiltChange', {\n    detail: values\n  }));\n  this.updateCall = null;\n};\nVanillaTilt.prototype.setTransition = function setTransition() {\n  var _this = this;\n  clearTimeout(this.transitionTimeout);\n  this.element.style.transition = this.settings.speed + 'ms ' + this.settings.easing;\n  this.transitionTimeout = setTimeout(function () {\n    _this.element.style.transition = '';\n  }, this.settings.speed);\n};\nVanillaTilt.prototype.getSettings = function getSettings() {\n  var defaultSettings = {\n    reverse: true,\n    max: 15,\n    perspective: 1000,\n    easing: 'cubic-bezier(.03,.98,.52,.99)',\n    scale: '1',\n    speed: '300',\n    transition: true,\n    axis: null,\n    reset: true,\n    shadow: {\n      color: 'rgba(20, 26, 40, 0.2)',\n      x: {\n        min: -5,\n        max: 5\n      },\n      y: {\n        min: 3.5,\n        max: 10.5\n      },\n      spread: 42\n    }\n  };\n  return defaultSettings;\n};\nVanillaTilt.init = function init(elements, settings) {\n  if (elements instanceof Node) {\n    elements = [elements];\n  }\n  if (elements instanceof NodeList) {\n    elements = [].slice.call(elements);\n  }\n  if (!(elements instanceof Array)) {\n    return;\n  }\n  elements.forEach(function (element) {\n    if (!('vanillaTilt' in element)) {\n      element.vanillaTilt = new VanillaTilt(element, settings);\n    }\n  });\n};\nvar cardStyles = {\n  width: '300px',\n  padding: '30px',\n  margin: '10px',\n  background: '#fff',\n  borderRadius: '4px',\n  color: '#364962',\n  fontSize: '16px',\n  lineHeight: 1.6\n};\nvar Card = function (_React$Component) {\n  _inherits(Card, _React$Component);\n  function Card() {\n    _classCallCheck(this, Card);\n    return _possibleConstructorReturn(this, (Card.__proto__ || Object.getPrototypeOf(Card)).apply(this, arguments));\n  }\n  _createClass(Card, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      VanillaTilt.init(document.querySelectorAll('[data-tilt]'));\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var styles = Object.assign({}, cardStyles, this.props.style);\n      return _react2.default.createElement('div', _extends({\n        'data-tilt': true,\n        style: styles\n      }, this.props));\n    }\n  }]);\n  return Card;\n}(_react2.default.Component);\nexports.default = Card;","map":null,"metadata":{},"sourceType":"script"}